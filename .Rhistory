shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
?mapview
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp(port=5448, host="0.0.0.0")
shiny::runApp()
runApp(port=5448, host="0.0.0.0")
runApp(port=5448, host="0.0.0.0")
runApp(port=5448, host="0.0.0.0")
runApp()
runApp()
runApp()
runApp(port=5448, host="0.0.0.0")
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp(port=5448, host="0.0.0.0")
runApp(port=5448, host="0.0.0.0")
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp(port=5448, host="0.0.0.0")
?observeEvent
runApp()
runApp()
?observe
?observeEvent
runApp()
shiny::runApp()
runApp(port=5448, host="0.0.0.0")
runApp()
shiny::runApp()
runApp()
runApp()
dbDisconnect(Connection)
runApp()
runApp()
shiny::runApp()
runApp(port=5448, host="0.0.0.0")
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp(port=5448, host="0.0.0.0")
runApp(port=5448, host="0.0.0.0")
shiny::runApp()
runApp(port=5448, host="0.0.0.0")
runApp(port=5448, host="0.0.0.0")
runApp(port=5448, host="0.0.0.0")
shiny::runApp()
# Methods and Functions are camelCase. Variables and Data Structures are PascalCase
# Fields generally follow snake_case for better SQL compatibility
# Dependency functions are not embedded in master functions
# []-notation is used wherever possible, and $-notation is avoided.
# []-notation is slower, but more explicit and works for atomic vectors
#############################################################################################################
############################################## CONFIGURATION, SCRIPT ########################################
#############################################################################################################
# Increase the timeout time and change the fancyquote settings
options(timeout=600, "useFancyQuotes"=FALSE)
# Load or install sf package
if (suppressWarnings(require("sf"))==FALSE) {
install.packages("sf",repos="http://cran.cnr.berkeley.edu/");
library("sf");
}
# Load or install shiny package
if (suppressWarnings(require("shiny"))==FALSE) {
install.packages("shiny",repos="http://cran.cnr.berkeley.edu/");
library("shiny");
}
# Load or install shiny package
if (suppressWarnings(require("shinydashboard"))==FALSE) {
install.packages("shinydashboard",repos="http://cran.cnr.berkeley.edu/");
library("shinydashboard");
}
# Load or install RPostgreSQL package
if (suppressWarnings(require("RPostgreSQL"))==FALSE) {
install.packages("RPostgreSQL",repos="http://cran.cnr.berkeley.edu/");
library("RPostgreSQL");
}
# Load or install leaflet package
if (suppressWarnings(require("leaflet"))==FALSE) {
install.packages("leaflet",repos="http://cran.cnr.berkeley.edu/");
library("leaflet");
}
# Load or install mapview package
if (suppressWarnings(require("mapview"))==FALSE) {
install.packages("mapview",repos="http://cran.cnr.berkeley.edu/");
library("mapview");
}
# Load or install shinyjs package
if (suppressWarnings(require("shinyjs"))==FALSE) {
install.packages("shinyjs",repos="http://cran.cnr.berkeley.edu/");
library("shinyjs");
}
# Get the geodatabase
getGDB<-function(collection_id) {
Path<-dbGetQuery(Connection,paste0("SELECT azgs_path FROM collections WHERE collection_id = ",sQuote(collection_id)))
return(paste(Path,"gisdata","ncgmp09",sep="/"))
}
getGDB(12)
# Download the config file
Credentials<-as.matrix(read.table("./credentials/Credentials.yml",row.names=1))
# Connect to PostgreSQL
Driver <- dbDriver("PostgreSQL") # Establish database driver
Connection <- dbConnect(Driver, dbname = Credentials["database:",], host = Credentials["host:",], port = Credentials["port:",], user = Credentials["user:",], password = Credentials["password:",])
getGDB(12)
tempdir()
shiny::runApp()
# Methods and Functions are camelCase. Variables and Data Structures are PascalCase
# Fields generally follow snake_case for better SQL compatibility
# Dependency functions are not embedded in master functions
# []-notation is used wherever possible, and $-notation is avoided.
# []-notation is slower, but more explicit and works for atomic vectors
#############################################################################################################
############################################## CONFIGURATION, SCRIPT ########################################
#############################################################################################################
# Increase the timeout time and change the fancyquote settings
options(timeout=600, "useFancyQuotes"=FALSE)
# Load or install sf package
if (suppressWarnings(require("sf"))==FALSE) {
install.packages("sf",repos="http://cran.cnr.berkeley.edu/");
library("sf");
}
# Load or install shiny package
if (suppressWarnings(require("shiny"))==FALSE) {
install.packages("shiny",repos="http://cran.cnr.berkeley.edu/");
library("shiny");
}
# Load or install shiny package
if (suppressWarnings(require("shinydashboard"))==FALSE) {
install.packages("shinydashboard",repos="http://cran.cnr.berkeley.edu/");
library("shinydashboard");
}
# Load or install RPostgreSQL package
if (suppressWarnings(require("RPostgreSQL"))==FALSE) {
install.packages("RPostgreSQL",repos="http://cran.cnr.berkeley.edu/");
library("RPostgreSQL");
}
# Load or install leaflet package
if (suppressWarnings(require("leaflet"))==FALSE) {
install.packages("leaflet",repos="http://cran.cnr.berkeley.edu/");
library("leaflet");
}
# Load or install mapview package
if (suppressWarnings(require("mapview"))==FALSE) {
install.packages("mapview",repos="http://cran.cnr.berkeley.edu/");
library("mapview");
}
# Load or install shinyjs package
if (suppressWarnings(require("shinyjs"))==FALSE) {
install.packages("shinyjs",repos="http://cran.cnr.berkeley.edu/");
library("shinyjs");
}
#############################################################################################################
####################################### LOAD DATA FUNCTIONS, CONVERSION #####################################
#############################################################################################################
# No functions at this time
######################################### LOAD DATA SCRIPT, CONVERSION ######################################
# Download the config file
Credentials<-as.matrix(read.table("./credentials/Credentials.yml",row.names=1))
# Connect to PostgreSQL
Driver <- dbDriver("PostgreSQL") # Establish database driver
Connection <- dbConnect(Driver, dbname = Credentials["database:",], host = Credentials["host:",], port = Credentials["port:",], user = Credentials["user:",], password = Credentials["password:",])
# Construct the Query
Query<-paste0(
"SELECT collection_id, char_string AS title
FROM (SELECT collection_id, json_data FROM metadata.metadata WHERE collection_id IN
(SELECT DISTINCT collection_id FROM ncgmp09.",
dQuote("MapUnitPolys"),
")) AS A,
jsonb_array_elements(json_data #> '{gmd:MD_Metadata,gmd:identificationInfo}') identificationInfo,
jsonb_array_elements(identificationInfo -> 'gmd:MD_DataIdentification') dataID,
jsonb_array_elements(dataID -> 'gmd:citation') citation,
jsonb_array_elements(citation ->  'gmd:CI_Citation') ci_citation,
jsonb_array_elements(ci_citation -> 'gmd:title') title,
jsonb_array_elements(title -> 'gco:CharacterString') char_string
;")
# Query available ncgmp09 datasets
NCGMP09_titles<-suppressWarnings(dbGetQuery(Connection,Query))
# Methods and Functions are camelCase. Variables and Data Structures are PascalCase
# Fields generally follow snake_case for better SQL compatibility
# Dependency functions are not embedded in master functions
# []-notation is used wherever possible, and $-notation is avoided.
# []-notation is slower, but more explicit and works for atomic vectors
#############################################################################################################
############################################## CONFIGURATION, SCRIPT ########################################
#############################################################################################################
# Increase the timeout time and change the fancyquote settings
options(timeout=600, "useFancyQuotes"=FALSE)
# Load or install sf package
if (suppressWarnings(require("sf"))==FALSE) {
install.packages("sf",repos="http://cran.cnr.berkeley.edu/");
library("sf");
}
# Load or install shiny package
if (suppressWarnings(require("shiny"))==FALSE) {
install.packages("shiny",repos="http://cran.cnr.berkeley.edu/");
library("shiny");
}
# Load or install shiny package
if (suppressWarnings(require("shinydashboard"))==FALSE) {
install.packages("shinydashboard",repos="http://cran.cnr.berkeley.edu/");
library("shinydashboard");
}
# Load or install RPostgreSQL package
if (suppressWarnings(require("RPostgreSQL"))==FALSE) {
install.packages("RPostgreSQL",repos="http://cran.cnr.berkeley.edu/");
library("RPostgreSQL");
}
# Load or install leaflet package
if (suppressWarnings(require("leaflet"))==FALSE) {
install.packages("leaflet",repos="http://cran.cnr.berkeley.edu/");
library("leaflet");
}
# Load or install mapview package
if (suppressWarnings(require("mapview"))==FALSE) {
install.packages("mapview",repos="http://cran.cnr.berkeley.edu/");
library("mapview");
}
# Load or install shinyjs package
if (suppressWarnings(require("shinyjs"))==FALSE) {
install.packages("shinyjs",repos="http://cran.cnr.berkeley.edu/");
library("shinyjs");
}
#############################################################################################################
####################################### LOAD DATA FUNCTIONS, CONVERSION #####################################
#############################################################################################################
# No functions at this time
######################################### LOAD DATA SCRIPT, CONVERSION ######################################
# Download the config file
Credentials<-as.matrix(read.table("./credentials/Credentials.yml",row.names=1))
# Connect to PostgreSQL
Driver <- dbDriver("PostgreSQL") # Establish database driver
Connection <- dbConnect(Driver, dbname = Credentials["database:",], host = Credentials["host:",], port = Credentials["port:",], user = Credentials["user:",], password = Credentials["password:",])
# Construct the Query
Query<-paste0(
"SELECT collection_id, char_string AS title
FROM (SELECT collection_id, json_data FROM metadata.metadata WHERE collection_id IN
(SELECT DISTINCT collection_id FROM ncgmp09.",
dQuote("MapUnitPolys"),
")) AS A,
jsonb_array_elements(json_data #> '{gmd:MD_Metadata,gmd:identificationInfo}') identificationInfo,
jsonb_array_elements(identificationInfo -> 'gmd:MD_DataIdentification') dataID,
jsonb_array_elements(dataID -> 'gmd:citation') citation,
jsonb_array_elements(citation ->  'gmd:CI_Citation') ci_citation,
jsonb_array_elements(ci_citation -> 'gmd:title') title,
jsonb_array_elements(title -> 'gco:CharacterString') char_string
;")
# Query available ncgmp09 datasets
NCGMP09_titles<-suppressWarnings(dbGetQuery(Connection,Query))
NCGMP09_titles
Test<-dbGetQuery(Connection,"SELECT json_data FROM metadata.metadata;")
Test<-dbGetQuery(Connection,"SELECT json_data::text FROM metadata.metadata;")
Test
write.table(Test,Test.json)
write.table(Test,"~/Desktop/Test.json")
